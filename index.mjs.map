{"version":3,"file":"index.mjs","sources":["../lib/max.js","../lib/ndarray.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = max( N, x, 1 );\n* // returns 2.0\n*/\nfunction max( N, x, stride ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tmax = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nmodule.exports = max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} maximum value\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = max( N, x, 2, 1 );\n* // returns 4.0\n*/\nfunction max( N, x, stride, offset ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tmax = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nmodule.exports = max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar max = require( './max.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( max, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum value of a strided array.\n*\n* @module @stdlib/stats-base-max\n*\n* @example\n* var max = require( '@stdlib/stats-base-max' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = max( N, x, 1 );\n* // returns 2.0\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var max = require( '@stdlib/stats-base-max' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = max.ndarray( N, x, 2, 1 );\n* // returns 4.0\n*/\n\n// MODULES //\n\nvar max = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = max;\n"],"names":["isnan","require$$0","isPositiveZero","require$$1","max_1","N","x","stride","max","ix","v","i","NaN","ndarray","offset","require$$2","lib"],"mappings":";;iTAsBA,IAAIA,EAAQC,EACRC,EAAiBC,EAsDrB,IAAAC,EAlCA,SAAcC,EAAGC,EAAGC,GACnB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOO,IAER,GAAW,IAANP,GAAsB,IAAXE,EACf,OAAOD,EAAG,GAQX,IADAE,EAAMF,EAJLG,EADIF,EAAS,GACP,EAAEF,GAAKE,EAER,GAGAI,EAAI,EAAGA,EAAIN,EAAGM,IAAM,CAGzB,GADAD,EAAIJ,EADJG,GAAMF,GAEDP,EAAOU,GACX,OAAOA,GAEHA,EAAIF,GAASE,IAAMF,GAAON,EAAgBQ,MAC9CF,EAAME,GAGR,OAAOF,GCjDJR,EAAQC,EACRC,EAAiBC,EAqDrB,IAAAU,EA9BA,SAAcR,EAAGC,EAAGC,EAAQO,GAC3B,IAAIN,EACAC,EACAC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOO,IAER,GAAW,IAANP,GAAsB,IAAXE,EACf,OAAOD,EAAGQ,GAIX,IADAN,EAAMF,EADNG,EAAKK,GAECH,EAAI,EAAGA,EAAIN,EAAGM,IAAM,CAGzB,GADAD,EAAIJ,EADJG,GAAMF,GAEDP,EAAOU,GACX,OAAOA,GAEHA,EAAIF,GAASE,IAAMF,GAAON,EAAgBQ,MAC9CF,EAAME,GAGR,OAAOF,GC/CRA,EAAAL,EADAF,EAOAO,EAAA,UALAO,GAUA,ICkBAC,EDlBAR"}